- Datetime: 2024-12-24 14:50:07

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - apps/backend/cmd/main.go

> add an endpoint that takes a series of 4 tileids, and returns the linktext for the group those tiles belong to

I'll help add an endpoint to fetch the link text for a group based on tile IDs. We'll need to add a new endpoint handler that uses the existing gameService.

Here's the change:

Filepath: apps/backend/cmd/main.go
Replace lines: 214-214
```go
	// Handler for getting link text for a set of tiles
	http.HandleFunc("/api/games/link", func(w http.ResponseWriter, r *http.Request) {
		enableCors(&w)
		if r.Method == "OPTIONS" {
			return
		}

		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		// Read and parse the request body
		var linkRequest struct {
			TileIDs []int64 `json:"tile_ids"`
		}

		if err := json.NewDecoder(r.Body).Decode(&linkRequest); err != nil {
			http.Error(w, "Invalid JSON format", http.StatusBadRequest)
			return
		}

		// Validate input
		if len(linkRequest.TileIDs) != 4 {
			http.Error(w, "Must provide exactly 4 tile IDs", http.StatusBadRequest)
			return
		}

		// Get the link text for these tiles
		linkText, err := gameService.GetLinkTextForTiles(r.Context(), linkRequest.TileIDs)
		if err != nil {
			if strings.Contains(err.Error(), "not found") {
				http.Error(w, err.Error(), http.StatusNotFound)
				return
			}
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return the result
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"link_text": linkText,
		})
	})

	http.HandleFunc("/api/games/check", func(w http.ResponseWriter, r *http.Request) {
```

Note: This change assumes you'll need to add a `GetLinkTextForTiles` method to your game service. You'll need to add this method to your service package. Would you like me to help with that implementation as well?

The new endpoint will:
1. Accept POST requests to `/api/games/link`
2. Expect a JSON body with an array of 4 tile IDs
3. Return the link text for the group those tiles belong to
4. Handle appropriate error cases

Would you like me to help implement the service method as well?

---

- Datetime: 2024-12-24 14:52:17

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - apps/backend/cmd/main.go

> i want to update the /check endpoint, to also retrieve the linktext that is stored for that group and return that along with the correct status, but only if it isCorrect 

I'll help modify the `/check` endpoint to include the link text when the tile selection is correct. We'll need to update the response structure and get the link text from the game service.

Here's the change:

Filepath: apps/backend/cmd/main.go
Replace lines: 246-261
```go
		// Check if the tiles form a valid group and get the link text
		isCorrect, linkText, err := gameService.CheckTileSelection(r.Context(), checkRequest.GameID, checkRequest.TileIDs)
		if err != nil {
			if strings.Contains(err.Error(), "not found") {
				http.Error(w, err.Error(), http.StatusNotFound)
				return
			}
			http.Error(w, "Internal server error", http.StatusInternalServerError)
			return
		}

		// Return the result
		response := map[string]interface{}{
			"correct": isCorrect,
		}
		
		// Only include link_text if the selection was correct
		if isCorrect {
			response["link_text"] = linkText
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
```

This change assumes you'll need to modify the `CheckTileSelection` method in your game service to also return the link text. Would you like me to help with updating the service implementation as well?

The modified endpoint will now:
1. Return both the correct status and link text when the tiles form a valid group
2. Only include the link_text field in the response when correct is true
3. Maintain the same error handling behavior

Would you like me to help with the service layer changes needed to support this?

---

- Datetime: 2024-12-24 14:55:00

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - apps/backend/cmd/main.go

> func (s *GameService) CheckTileSelection(ctx context.Context, gameID int64, tileIDs []int64) (bool, error) {
> 	// First, verify the game exists
> 	_, err := s.queries.GetGame(ctx, gameID)
> 	if err != nil {
> 		if err == sql.ErrNoRows {
> 			return false, fmt.Errorf("game not found")
> 		}
> 		return false, err
> 	}
> 
> 	// Get the group ID for these tiles (they should all be in the same group)
> 	tiles, err := s.queries.GetTilesByIDs(ctx, tileIDs)
> 	if err != nil {
> 		return false, err
> 	}
> 
> 	if len(tiles) != 4 {
> 		return false, nil
> 	}
> 
> 	// Check if all tiles belong to the same group
> 	groupID := `tiles[0]`.GroupID
> 	for _, tile := range `tiles[1:]` {
> 		if tile.GroupID != groupID {
> 			return false, nil
> 		}
> 	}
> 
> 	return true, nil
> }
> 
> 
> 
> This is the checktileselection method please help

I'll help modify the `CheckTileSelection` method to also return the link text when the tiles form a valid group. Here's the updated version:

Filepath: internal/service/game_service.go
Replace lines: 0-0
```nil
func (s *GameService) CheckTileSelection(ctx context.Context, gameID int64, tileIDs []int64) (bool, string, error) {
	// First, verify the game exists
	_, err := s.queries.GetGame(ctx, gameID)
	if err != nil {
		if err == sql.ErrNoRows {
			return false, "", fmt.Errorf("game not found")
		}
		return false, "", err
	}

	// Get the group ID for these tiles (they should all be in the same group)
	tiles, err := s.queries.GetTilesByIDs(ctx, tileIDs)
	if err != nil {
		return false, "", err
	}

	if len(tiles) != 4 {
		return false, "", nil
	}

	// Check if all tiles belong to the same group
	groupID := tiles[0].GroupID
	for _, tile := range tiles[1:] {
		if tile.GroupID != groupID {
			return false, "", nil
		}
	}

	// Get the group to retrieve the link text
	group, err := s.queries.GetGroup(ctx, groupID)
	if err != nil {
		return false, "", err
	}

	return true, group.Link, nil
}
```

This updated version:
1. Changes the return signature to include the link text string
2. Returns empty string for link text in error cases
3. Fetches the group information to get the link text when the tiles form a valid group
4. Returns both the success status and the link text

Note: This assumes you have a `GetGroup` query method in your queries interface. If you don't have this method, we'll need to add it to your SQL queries. Would you like me to help with that as well?

---

- Datetime: 2024-12-24 16:42:54

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> @codebase what do you know about my application

Based on the provided context and code, I can tell that your application is a puzzle/game web service with the following key features:

1. **Backend Architecture**:
   - Written in Go
   - Uses PostgreSQL as the database
   - RESTful API design
   - Runs on port 8181

2. **Game Structure**:
   - Games have:
     - An author
     - Difficulty levels (Easy, Medium, Hard, Impossible)
     - Time limits (Unlimited, 15, 10, 5)
     - Groups of tiles
     - Creation/update timestamps

3. **Core Game Concepts**:
   - Games are made up of groups of tiles
   - Each group has:
     - A link (some kind of connection/relationship)
     - Link terms
     - 4 tiles that belong together
   - Each tile has a title

4. **API Endpoints**:
   - `/api/game` - POST: Creates a new game
   - `/api/games` - GET: Lists all games
   - `/api/games/{id}` - GET: Retrieves tiles for a specific game
   - `/api/games/check` - POST: Validates if 4 selected tiles form a correct group and returns the link text if correct

5. **Game Mechanics**:
   - Players need to select exactly 4 tiles
   - These tiles need to belong to the same group to be correct
   - When correct, the game reveals the "link text" that explains the connection between the tiles

6. **Service Layer**:
   - Has a GameService that handles game logic
   - Includes functionality for:
     - Fetching all games
     - Fetching tiles for a game
     - Checking tile selections
     - Managing game groups

The application appears to be a connection-finding puzzle game where players need to identify groups of 4 related tiles and understand the relationship (link) between them.

---

- Datetime: 2024-12-24 16:44:28

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> can you suggest some optimisations i can make

Based on the code shown, here are several optimization suggestions:

1. **Router Implementation**
```go
// Instead of using raw http.HandleFunc, use a proper router like chi or gorilla/mux
// This will give you better route handling, middleware support, and cleaner code
import "github.com/go-chi/chi/v5"

func main() {
    r := chi.NewRouter()
    
    // Middleware
    r.Use(cors.Handler) // Replace your enableCors function
    
    // Routes
    r.Post("/api/game", handleCreateGame)
    r.Get("/api/games", handleListGames)
    r.Get("/api/games/{gameID}", handleGetGame)
    r.Post("/api/games/check", handleCheckTiles)
    
    http.ListenAndServe(":8181", r)
}
```

2. **Structured Error Handling**
```go
// Create a custom error response structure
type ErrorResponse struct {
    Error string `json:"error"`
    Code  int    `json:"code"`
}

func respondWithError(w http.ResponseWriter, code int, message string) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(code)
    json.NewEncoder(w).Encode(ErrorResponse{
        Error: message,
        Code:  code,
    })
}
```

3. **Request/Response Structs**
```go
// Move all request/response structs to separate package
type CreateGameRequest struct {
    Author     string   `json:"author" validate:"required"`
    Difficulty string   `json:"difficulty" validate:"required,oneof=Easy Medium Hard Impossible"`
    TimeLimit  string   `json:"time_limit" validate:"required"`
    Groups     []Group  `json:"groups" validate:"required,min=1"`
}

type Group struct {
    Link      string   `json:"link" validate:"required"`
    LinkTerms []string `json:"link_terms" validate:"required"`
    Tiles     []Tile   `json:"tiles" validate:"required,len=4"`
}
```

4. **Context Timeout**
```go
// Add context timeout to your handlers
func handleCreateGame(w http.ResponseWriter, r *http.Request) {
    ctx, cancel := context.WithTimeout(r.Context(), 10*time.Second)
    defer cancel()
    
    // Use ctx for database operations
}
```

5. **Middleware Chain**
```go
// Add middleware for common operations
func loggingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        start := time.Now()
        next.ServeHTTP(w, r)
        log.Printf("%s %s took %v", r.Method, r.URL.Path, time.Since(start))
    })
}

func recoveryMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        defer func() {
            if err := recover(); err != nil {
                log.Printf("panic: %v", err)
                http.Error(w, "Internal Server Error", http.StatusInternalServerError)
            }
        }()
        next.ServeHTTP(w, r)
    })
}
```

6. **Database Connection Pool Configuration**
```go
func setupDB(cfg *config.Config) (*sql.DB, error) {
    db, err := sql.Open("postgres", cfg.DBConnString)
    if err != nil {
        return nil, err
    }
    
    // Set connection pool parameters
    db.SetMaxOpenConns(25)
    db.SetMaxIdleConns(25)
    db.SetConnMaxLifetime(5 * time.Minute)
    
    return db, nil
}
```

7. **Input Validation**
```go
// Add input validation using a package like go-playground/validator
import "github.com/go-playground/validator/v10"

var validate = validator.New()

func validateCreateGameRequest(req CreateGameRequest) error {
    return validate.Struct(req)
}
```

8. **Graceful Shutdown**
```go
func main() {
    srv := &http.Server{
        Addr:    ":8181",
        Handler: router,
    }
    
    // Graceful shutdown
    go func() {
        sigChan := make(chan os.Signal, 1)
        signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
        <-sigChan
        
        ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
        defer cancel()
        
        if err := srv.Shutdown(ctx); err != nil {
            log.Printf("HTTP server Shutdown: %v", err)
        }
    }()
    
    if err := srv.ListenAndServe(); err != http.ErrServerClosed {
        log.Fatalf("HTTP server ListenAndServe: %v", err)
    }
}
```

9. **Response Helper**
```go
func respondJSON(w http.ResponseWriter, code int, payload interface{}) {
    response, err := json.Marshal(payload)
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        return
    }
    
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(code)
    w.Write(response)
}
```

10. **Configuration Management**
```go
// Use environment variables with sensible defaults
type Config struct {
    Port            string        `envconfig:"PORT" default:"8181"`
    DatabaseURL     string        `envconfig:"DATABASE_URL" required:"true"`
    RequestTimeout  time.Duration `envconfig:"REQUEST_TIMEOUT" default:"10s"`
    AllowedOrigins []string      `envconfig:"ALLOWED_ORIGINS" default:"*"`
}
```

Would you like me to provide more detailed implementation of any of these suggestions? Each of these optimizations would improve different aspects of your application:
- Better error handling
- Improved request validation
- More robust HTTP server
- Better database connection management
- Cleaner code structure
- Improved monitoring and logging
- Better configuration management

---

- Datetime: 2024-12-24 19:56:53

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> tell me where all these new files should go

I'll help organize the suggested optimizations into a proper directory structure. Here's where each new file should go:

```
.
├── cmd/
│   └── main.go            // Your existing main file (will be refactored)
│
├── internal/
│   ├── api/              // New package for HTTP handlers
│   │   ├── handlers/
│   │   │   ├── game.go   // Game-related handlers
│   │   │   └── middleware.go // Middleware functions
│   │   ├── response/
│   │   │   └── json.go   // JSON response helpers
│   │   └── router.go     // Chi router setup
│   │
│   ├── models/           // Request/Response structs
│   │   ├── requests.go   // All request structs
│   │   └── responses.go  // All response structs
│   │
│   ├── config/          // Your existing config package
│   │   └── config.go    // Enhanced with new config struct
│   │
│   ├── db/             // Your existing db package
│   │   └── db.go       // Enhanced with connection pool config
│   │
│   ├── service/        // Your existing service package
│   │   └── game_service.go
│   │
│   └── validator/      // New package for input validation
│       └── validator.go
│
└── pkg/               // Shared utilities
    ├── errors/
    │   └── errors.go  // Custom error types
    └── logger/
        └── logger.go  // Logging utilities
```

Here's a brief example of what each new file would contain:

1. `internal/api/handlers/game.go`:
```go
package handlers

import (
    "net/http"
    "github.com/lukeberry99/puzzle/internal/service"
    "github.com/lukeberry99/puzzle/internal/models"
)

type GameHandler struct {
    gameService *service.GameService
}

func NewGameHandler(gs *service.GameService) *GameHandler {
    return &GameHandler{gameService: gs}
}

func (h *GameHandler) CreateGame(w http.ResponseWriter, r *http.Request) {
    // Your create game handler logic
}
```

2. `internal/api/middleware.go`:
```go
package api

import "net/http"

func CorsMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Access-Control-Allow-Origin", "*")
        // ... other CORS headers
        next.ServeHTTP(w, r)
    })
}
```

3. `internal/api/response/json.go`:
```go
package response

import "net/http"

func JSON(w http.ResponseWriter, code int, data interface{}) {
    // JSON response helper
}

func Error(w http.ResponseWriter, code int, message string) {
    // Error response helper
}
```

4. `internal/models/requests.go`:
```go
package models

type CreateGameRequest struct {
    Author     string   `json:"author" validate:"required"`
    Difficulty string   `json:"difficulty" validate:"required"`
    TimeLimit  string   `json:"time_limit" validate:"required"`
    Groups     []Group  `json:"groups" validate:"required,min=1"`
}
```

5. `internal/api/router.go`:
```go
package api

import (
    "github.com/go-chi/chi/v5"
    "github.com/lukeberry99/puzzle/internal/api/handlers"
)

func NewRouter(gh *handlers.GameHandler) *chi.Mux {
    r := chi.NewRouter()
    
    // Middleware
    r.Use(CorsMiddleware)
    
    // Routes
    r.Post("/api/game", gh.CreateGame)
    // ... other routes
    
    return r
}
```

6. `pkg/errors/errors.go`:
```go
package errors

type APIError struct {
    Code    int    `json:"code"`
    Message string `json:"message"`
}
```

Would you like me to provide more detailed implementation of any of these files? This structure follows Go best practices and will make your code more maintainable and testable.

The main benefits of this structure are:
- Clear separation of concerns
- Better testability
- More maintainable code
- Easier to add new features
- Better error handling
- Cleaner dependency injection

---

- Datetime: 2024-12-24 19:57:57

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> when is something a pkg, and when does it just live in the internal folder

The distinction between `pkg` and `internal` directories is an important Go convention. Here's the key differences:

`internal/`:
- Code that's private to your application
- Can only be imported by code inside the parent of the `internal` directory
- Used for code that's specific to your application
- You don't want other projects to import or depend on it
- Examples from your code that belong in `internal/`:
  - Your game service logic
  - Your API handlers
  - Database queries
  - Application-specific models
  - Configuration specific to your puzzle game

`pkg/`:
- Reusable code that could be used by other projects
- Public code that you expect others might want to import
- Generic utilities that aren't specific to your application
- Examples of what should go in `pkg/`:
  - Generic HTTP utilities
  - Common middleware
  - Shared validation helpers
  - Generic error types
  - Logging utilities
  - Common data structures

From your current codebase, here's how I would organize it:

```go
internal/
├── api/           // Your HTTP handlers and routing logic
├── config/        // Your puzzle game configuration
├── db/            // Database queries and models
├── game/          // Game-specific business logic
└── models/        // Game-specific data structures

pkg/
├── httputil/      // Generic HTTP helpers like:
│   ├── cors/      // CORS middleware
│   ├── response/  // JSON response helpers
│   └── server/    // Generic server setup helpers
├── validation/    // Generic validation utilities
└── errors/        // Generic error types and handling
```

A good rule of thumb:
- If the code is specific to your puzzle game → `internal/`
- If the code could be useful in other projects → `pkg/`

For example, your CORS middleware could be moved to `pkg/` because it's generic and reusable, but your game service logic should stay in `internal/` because it's specific to your puzzle game.

---

- Datetime: 2024-12-24 19:59:16

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> ok, but it's not like these can be used directly by other projects is it? Would I have to take other steps for that?

Ah, good question! For code to be truly reusable across different projects, there are several additional steps needed:

1. **Package Organization**: The code needs to be in its own repository or module with a proper go.mod file
2. **Version Management**: You need to tag releases with semantic versioning
3. **Documentation**: Proper godoc documentation and examples
4. **API Design**: The code needs to be designed for extensibility and configuration

Let me show you an example of how one of these utilities could be properly packaged for reuse. Let's take the HTTP response helpers as an example:

```go
// In a separate repository like github.com/lukeberry99/httputil
// pkg/httputil/response/response.go

package response

import (
    "encoding/json"
    "net/http"
)

// Options allows customization of response behavior
type Options struct {
    // DefaultContentType sets the Content-Type header if not already set
    DefaultContentType string
    // ErrorHandler is called when json.Marshal fails
    ErrorHandler func(w http.ResponseWriter, err error)
    // HeaderModifier allows custom header manipulation
    HeaderModifier func(h http.Header)
}

// Responder handles HTTP JSON responses
type Responder struct {
    opts Options
}

// New creates a new Responder with the given options
func New(opts Options) *Responder {
    if opts.DefaultContentType == "" {
        opts.DefaultContentType = "application/json"
    }
    if opts.ErrorHandler == nil {
        opts.ErrorHandler = defaultErrorHandler
    }
    return &Responder{opts: opts}
}

// JSON sends a JSON response with the given status code and data
func (r *Responder) JSON(w http.ResponseWriter, code int, data interface{}) {
    response, err := json.Marshal(data)
    if err != nil {
        r.opts.ErrorHandler(w, err)
        return
    }

    w.Header().Set("Content-Type", r.opts.DefaultContentType)
    if r.opts.HeaderModifier != nil {
        r.opts.HeaderModifier(w.Header())
    }
    
    w.WriteHeader(code)
    w.Write(response)
}

func defaultErrorHandler(w http.ResponseWriter, err error) {
    http.Error(w, "Internal Server Error", http.StatusInternalServerError)
}
```

Then in your `go.mod`:
```
module github.com/lukeberry99/httputil

go 1.21
```

And documentation:
```go
// Example usage in README.md or examples/example_test.go
package example

func ExampleResponder() {
    responder := response.New(response.Options{
        HeaderModifier: func(h http.Header) {
            h.Set("X-Custom-Header", "value")
        },
    })

    http.HandleFunc("/api", func(w http.ResponseWriter, r *http.Request) {
        data := map[string]string{"message": "hello"}
        responder.JSON(w, http.StatusOK, data)
    })
}
```

So to answer your question directly:
1. For `internal/` code:
   - Keep it as is
   - It's for your puzzle game only
   - Other projects can't import it even if they try

2. For truly reusable `pkg/` code:
   - Move it to a separate repository
   - Design a clean, configurable API
   - Add proper documentation
   - Use semantic versioning
   - Write examples and tests
   - Consider backward compatibility

Given this, I'd revise my earlier advice: Unless you're specifically planning to make reusable packages, keep most of your code in `internal/`. The `pkg/` directory in your main project should only be used for code that:
1. Might be extracted into its own package later
2. Is used by multiple parts of your application
3. Has a clean, stable API

This is why many Go projects actually have very small or no `pkg/` directories - most application-specific code belongs in `internal/`.

---

- Datetime: 2024-12-24 20:00:54

- Model: claude/claude-3-5-sonnet-20241022

- Selected files:
  - cmd/main.go

> OK, let's say everything is just staying in the internal server for  now, I have no intentions of making anything a separate pkg or sharing it around. With this in mind, what steps would you make to ensure that this puzzlegame follows best practices? Please be as thorough as possible

I'll provide a thorough refactoring plan to improve your puzzle game following Go best practices, keeping everything in `internal/`. Let's break this down step by step:

1. First, let's establish the directory structure:

```
internal/
├── api/
│   ├── handlers/
│   │   ├── game_handler.go    // Game-related handlers
│   │   └── middleware.go      // CORS and other middleware
│   ├── response/
│   │   └── json.go           // Response helpers
│   └── router.go             // Router setup
├── config/
│   └── config.go             // Enhanced config
├── db/                       // Your existing DB package
│   └── queries.go
├── models/
│   ├── game.go              // Game-related structs
│   └── errors.go            // Custom error types
└── service/
    └── game_service.go      // Enhanced game service
```

2. Let's create proper request/response models:

```go
// internal/models/game.go
package models

type Tile struct {
    ID    int64  `json:"id"`
    Title string `json:"title" validate:"required"`
}

type Group struct {
    Link      string   `json:"link" validate:"required"`
    LinkTerms []string `json:"link_terms" validate:"required,min=1"`
    Tiles     []Tile   `json:"tiles" validate:"required,len=4"`
}

type CreateGameRequest struct {
    Author     string  `json:"author" validate:"required"`
    Difficulty string  `json:"difficulty" validate:"required,oneof=Easy Medium Hard Impossible"`
    TimeLimit  string  `json:"time_limit" validate:"required,oneof=Unlimited 15 10 5"`
    Groups     []Group `json:"groups" validate:"required,min=1"`
}

type GameResponse struct {
    ID         int64  `json:"id"`
    Author     string `json:"author"`
    Difficulty string `json:"difficulty"`
    CreatedAt  string `json:"created_at"`
}

type CheckTilesRequest struct {
    GameID  int64   `json:"game_id" validate:"required,gt=0"`
    TileIDs []int64 `json:"tile_ids" validate:"required,len=4"`
}

type CheckTilesResponse struct {
    Correct  bool   `json:"correct"`
    LinkText string `json:"link_text,omitempty"`
}
```

3. Create response helpers:

```go
// internal/api/response/json.go
package response

import (
    "encoding/json"
    "net/http"
)

type ErrorResponse struct {
    Error string `json:"error"`
    Code  int    `json:"code"`
}

func JSON(w http.ResponseWriter, status int, data interface{}) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(status)
    json.NewEncoder(w).Encode(data)
}

func Error(w http.ResponseWriter, status int, message string) {
    JSON(w, status, ErrorResponse{
        Error: message,
        Code:  status,
    })
}
```

4. Create the game handler:

```go
// internal/api/handlers/game_handler.go
package handlers

import (
    "encoding/json"
    "net/http"
    "strconv"

    "github.com/lukeberry99/puzzle/internal/models"
    "github.com/lukeberry99/puzzle/internal/service"
    "github.com/lukeberry99/puzzle/internal/api/response"
)

type GameHandler struct {
    gameService *service.GameService
}

func NewGameHandler(gs *service.GameService) *GameHandler {
    return &GameHandler{
        gameService: gs,
    }
}

func (h *GameHandler) CreateGame(w http.ResponseWriter, r *http.Request) {
    var req models.CreateGameRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        response.Error(w, http.StatusBadRequest, "Invalid request format")
        return
    }
    defer r.Body.Close()

    gameID, err := h.gameService.CreateGame(r.Context(), req)
    if err != nil {
        response.Error(w, http.StatusInternalServerError, "Failed to create game")
        return
    }

    response.JSON(w, http.StatusCreated, map[string]interface{}{
        "game_id": gameID,
        "status":  "success",
    })
}

func (h *GameHandler) ListGames(w http.ResponseWriter, r *http.Request) {
    games, err := h.gameService.FetchAllGames(r.Context())
    if err != nil {
        response.Error(w, http.StatusInternalServerError, "Failed to fetch games")
        return
    }

    response.JSON(w, http.StatusOK, games)
}

// Add other handler methods...
```

5. Create middleware:

```go
// internal/api/handlers/middleware.go
package handlers

import "net/http"

func CorsMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Access-Control-Allow-Origin", "*")
        w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
        w.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")

        if r.Method == "OPTIONS" {
            w.WriteHeader(http.StatusOK)
            return
        }

        next.ServeHTTP(w, r)
    })
}
```

6. Enhance the game service:

```go
// internal/service/game_service.go
package service

import (
    "context"
    "errors"
    
    "github.com/lukeberry99/puzzle/internal/db"
    "github.com/lukeberry99/puzzle/internal/models"
)

type GameService struct {
    queries *db.Queries
}

func NewGameService(q *db.Queries) *GameService {
    return &GameService{queries: q}
}

func (s *GameService) CreateGame(ctx context.Context, req models.CreateGameRequest) (int64, error) {
    // Add validation logic here
    gameID, err := s.queries.CreateGame(ctx, db.CreateGameParams{
        Author:  req.Author,
        Column2: db.DifficultyLevel(req.Difficulty),
        Column3: db.TimeLimit(req.TimeLimit),
    })
    if err != nil {
        return 0, err
    }

    // Create groups and tiles
    for _, group := range req.Groups {
        if err := s.createGroupWithTiles(ctx, gameID, group); err != nil {
            return 0, err
        }
    }

    return gameID, nil
}

func (s *GameService) createGroupWithTiles(ctx context.Context, gameID int64, group models.Group) error {
    // Implementation
    return nil
}

// Add other service methods...
```

7. Finally, update the main.go:

```go
// cmd/main.go
package main

import (
    "context"
    "database/sql"
    "log"
    "net/http"
    "os"
    "os/signal"
    "time"

    "github.com/lukeberry99/puzzle/internal/api/handlers"
    "github.com/lukeberry99/puzzle/internal/config"
    "github.com/lukeberry99/puzzle/internal/db"
    "github.com/lukeberry99/puzzle/internal/service"
)

func main() {
    // Load configuration
    cfg, err := config.Load()
    if err != nil {
        log.Fatalf("Failed to load config: %v", err)
    }

    // Setup database
    dbConn, err := setupDatabase(cfg)
    if err != nil {
        log.Fatalf("Failed to setup database: %v", err)
    }
    defer dbConn.Close()

    // Initialize dependencies
    queries := db.New(dbConn)
    gameService := service.NewGameService(queries)
    gameHandler := handlers.NewGameHandler(gameService)

    // Setup router
    router := http.NewServeMux()
    router.HandleFunc("/api/game", gameHandler.CreateGame)
    router.HandleFunc("/api/games", gameHandler.ListGames)
    // Add other routes...

    // Create server
    srv := &http.Server{
        Addr:         ":8181",
        Handler:      handlers.CorsMiddleware(router),
        ReadTimeout:  15 * time.Second,
        WriteTimeout: 15 * time.Second,
    }

    // Start server
    go func() {
        log.Printf("Server starting on :8181")
        if err := srv.ListenAndServe(); err != http.ErrServerClosed {
            log.Fatalf("Failed to start server: %v", err)
        }
    }()

    // Graceful shutdown
    quit := make(chan os.Signal, 1)
    signal.Notify(quit, os.Interrupt)
    <-quit

    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
    defer cancel()

    if err := srv.Shutdown(ctx); err != nil {
        log.Printf("Server forced to shutdown: %v", err)
    }
}

func setupDatabase(cfg *config.Config) (*sql.DB, error) {
    db, err := sql.Open("postgres", cfg.DBConnString)
    if err != nil {
        return nil, err
    }

    db.SetMaxOpenConns(25)
    db.SetMaxIdleConns(25)
    db.SetConnMaxLifetime(5 * time.Minute)

    return db, nil
}
```

This refactoring provides several benefits:
1. Clear separation of concerns
2. Better error handling
3. Proper request/response models
4. Middleware support
5. Graceful shutdown
6. Structured logging
7. Better configuration management
8. More testable code structure

Would you like me to provide more details about any particular part or show how to implement tests for these components?

**Generation complete!** Please review the code suggestions above.

